/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  IGraphData,
  LegendData,
} from './interfaces';

declare global {

  namespace StencilComponents {
    interface MyApp {

    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BcgMatrixChart {
      'graphData': IGraphData;
      'updateGraphData': (graphData: IGraphData) => void;
    }
  }

  interface HTMLBcgMatrixChartElement extends StencilComponents.BcgMatrixChart, HTMLStencilElement {}

  var HTMLBcgMatrixChartElement: {
    prototype: HTMLBcgMatrixChartElement;
    new (): HTMLBcgMatrixChartElement;
  };
  interface HTMLElementTagNameMap {
    'bcg-matrix-chart': HTMLBcgMatrixChartElement;
  }
  interface ElementTagNameMap {
    'bcg-matrix-chart': HTMLBcgMatrixChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bcg-matrix-chart': JSXElements.BcgMatrixChartAttributes;
    }
  }
  namespace JSXElements {
    export interface BcgMatrixChartAttributes extends HTMLAttributes {
      'graphData'?: IGraphData;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface HorizontalBarChart {
      'graphData': IGraphData;
      'updateGraphData': (graphData: IGraphData) => void;
    }
  }

  interface HTMLHorizontalBarChartElement extends StencilComponents.HorizontalBarChart, HTMLStencilElement {}

  var HTMLHorizontalBarChartElement: {
    prototype: HTMLHorizontalBarChartElement;
    new (): HTMLHorizontalBarChartElement;
  };
  interface HTMLElementTagNameMap {
    'horizontal-bar-chart': HTMLHorizontalBarChartElement;
  }
  interface ElementTagNameMap {
    'horizontal-bar-chart': HTMLHorizontalBarChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'horizontal-bar-chart': JSXElements.HorizontalBarChartAttributes;
    }
  }
  namespace JSXElements {
    export interface HorizontalBarChartAttributes extends HTMLAttributes {
      'graphData'?: IGraphData;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LegendChart {
      'callOnClick': (callOnClickChild: any) => void;
      'legendData': LegendData;
    }
  }

  interface HTMLLegendChartElement extends StencilComponents.LegendChart, HTMLStencilElement {}

  var HTMLLegendChartElement: {
    prototype: HTMLLegendChartElement;
    new (): HTMLLegendChartElement;
  };
  interface HTMLElementTagNameMap {
    'legend-chart': HTMLLegendChartElement;
  }
  interface ElementTagNameMap {
    'legend-chart': HTMLLegendChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'legend-chart': JSXElements.LegendChartAttributes;
    }
  }
  namespace JSXElements {
    export interface LegendChartAttributes extends HTMLAttributes {
      'legendData'?: LegendData;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LineAnnotationsChart {
      'graphData': IGraphData;
      'updateGraphData': (graphData: IGraphData) => void;
    }
  }

  interface HTMLLineAnnotationsChartElement extends StencilComponents.LineAnnotationsChart, HTMLStencilElement {}

  var HTMLLineAnnotationsChartElement: {
    prototype: HTMLLineAnnotationsChartElement;
    new (): HTMLLineAnnotationsChartElement;
  };
  interface HTMLElementTagNameMap {
    'line-annotations-chart': HTMLLineAnnotationsChartElement;
  }
  interface ElementTagNameMap {
    'line-annotations-chart': HTMLLineAnnotationsChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'line-annotations-chart': JSXElements.LineAnnotationsChartAttributes;
    }
  }
  namespace JSXElements {
    export interface LineAnnotationsChartAttributes extends HTMLAttributes {
      'graphData'?: IGraphData;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LineChart {
      'graphData': IGraphData;
      'updateGraphData': (graphData: IGraphData) => void;
    }
  }

  interface HTMLLineChartElement extends StencilComponents.LineChart, HTMLStencilElement {}

  var HTMLLineChartElement: {
    prototype: HTMLLineChartElement;
    new (): HTMLLineChartElement;
  };
  interface HTMLElementTagNameMap {
    'line-chart': HTMLLineChartElement;
  }
  interface ElementTagNameMap {
    'line-chart': HTMLLineChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'line-chart': JSXElements.LineChartAttributes;
    }
  }
  namespace JSXElements {
    export interface LineChartAttributes extends HTMLAttributes {
      'graphData'?: IGraphData;
      'onLineChartRendered'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PieChart {
      'graphData': IGraphData;
      'updateGraphData': (graphData: IGraphData) => void;
    }
  }

  interface HTMLPieChartElement extends StencilComponents.PieChart, HTMLStencilElement {}

  var HTMLPieChartElement: {
    prototype: HTMLPieChartElement;
    new (): HTMLPieChartElement;
  };
  interface HTMLElementTagNameMap {
    'pie-chart': HTMLPieChartElement;
  }
  interface ElementTagNameMap {
    'pie-chart': HTMLPieChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pie-chart': JSXElements.PieChartAttributes;
    }
  }
  namespace JSXElements {
    export interface PieChartAttributes extends HTMLAttributes {
      'graphData'?: IGraphData;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TooltipChart {
      'align': string;
      'hide': () => void;
      'show': (message: string, positions: number[]) => void;
      'tooltip': (tooltip: any) => void;
    }
  }

  interface HTMLTooltipChartElement extends StencilComponents.TooltipChart, HTMLStencilElement {}

  var HTMLTooltipChartElement: {
    prototype: HTMLTooltipChartElement;
    new (): HTMLTooltipChartElement;
  };
  interface HTMLElementTagNameMap {
    'tooltip-chart': HTMLTooltipChartElement;
  }
  interface ElementTagNameMap {
    'tooltip-chart': HTMLTooltipChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tooltip-chart': JSXElements.TooltipChartAttributes;
    }
  }
  namespace JSXElements {
    export interface TooltipChartAttributes extends HTMLAttributes {
      'align'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;